---
title: "NYC Restaurant Shiny Dashboard"
output: 
  flexdashboard::flex_dashboard:
    orientation: row
    source_code: embed
runtime: shiny
---

```{r setup, include=FALSE}
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(viridis)

library(plotly)

library(shiny)
```

```{r import_data}
nyc_inspections = read_csv("./DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz", 
                           col_types = cols(building = col_character()),
                           na = c("NA", "N/A")) %>% 
  filter(grade %in% c("A", "B", "C")) %>% 
  mutate(inspection_num = row_number(),   
         boro = str_to_title(boro)) %>% 
  select(inspection_num, boro, grade, score, critical_flag, dba, cuisine_description, zipcode, violation_description)

# take 20000 random sample
set.seed(123)
nyc_subdata = nyc_inspections[sample(nrow(nyc_inspections), 20000), ]
```

Column {.sidebar}
-----------------------------------------------------------------------
This `flexdashboard` with Shiny was made to explore the restaurant scores and cuisines type comparison among the NYC Restaurants. The data come from New York City Department of Health and Mental Hygiene (DOHMH), which provides information of restaurant in NYC.There are 188,199 entries, we've randomly taken 20000 sample from it.Download the data used for this app [here](http://jeffgoldsmith.com/DSI/dataset_restaurant_inspections.html).


```{r}
boros = nyc_subdata %>% distinct(boro) %>% pull()

# select Input widget
  selectInput("boro_choice", label = h3("Select boro"),
            choices = boros, selected = "Manhattan")

hr()

# slider Input widter
renderUI({
  max_score = nyc_subdata %>% filter(boro == input$boro_choice) %>% 
                           distinct(score) %>% max()
  
  min_score = nyc_subdata %>% filter(boro == input$boro_choice) %>% 
                           distinct(score) %>% min()
  
  sliderInput("score_range", label = h3("Choose score range"), min = min_score, 
        max = max_score, value = c(5, 80))
})  

  # value: default value range when it shows up

hr()

grade_choice = nyc_subdata %>% distinct(grade) %>% pull()

# radioButtons widget
radioButtons("grade_choice", label = h3("Choose Grade type"),
    choices = grade_choice, 
    selected = "A")

```

Row 
-----------------------------------------------------------------------

### NYC Restaurant Scores by Zip Code

```{r}
renderPlotly({
  nyc_subdata %>%
  filter(boro == input$boro_choice, 
           score %in% input$score_range[1]:input$score_range[2],
           grade == input$grade_choice) %>%
  mutate(text_label = str_c("Score: ", score, '\ngrade: ', grade)) %>% 
  filter(boro == input$boro_choice) %>%
  plot_ly(x = ~zipcode, y = ~score, type = "scatter", mode = "markers",
          alpha = 0.5, 
          color = ~score,
          text = ~text_label) 
})
```

Row {.tabset .tabset-fade } 
-----------------------------------------------------------------------

### Different cuisines available in NYC (bar chart)

```{r}
renderPlotly({
  nyc_subdata %>% 
  filter(boro == input$boro_choice, 
           score %in% input$score_range[1]:input$score_range[2],
           grade == input$grade_choice) %>%
  count(cuisine_description) %>% 
  mutate(cuisine_description = fct_reorder(cuisine_description, n)) %>% 
  plot_ly(x = ~cuisine_description, y = ~n, color = ~cuisine_description, type = "bar", colors = "Set2") %>%
  layout(legend = list(x = 100, y = 0.5)) %>%
  layout(
    title = "Number of restaurants by cuisine in NYC") %>%
    layout(yaxis = list(title = 'Number of Restaurants')) %>%
    layout(xaxis = list(title = 'Cuisine Type'))
})
```

### Score based on cuisine description

```{r}
renderPlotly({
  common_cuisine =
  nyc_subdata %>% 
    filter(boro == input$boro_choice, 
           score %in% input$score_range[1]:input$score_range[2],
           grade == input$grade_choice) %>%
  count(cuisine_description, sort = TRUE) %>% 
  top_n(10) %>% 
  select(cuisine_description)

nyc_subdata %>% 
filter(boro == input$boro_choice, 
           score %in% input$score_range[1]:input$score_range[2],
           grade == input$grade_choice) %>%
inner_join(., common_cuisine,
             by = "cuisine_description") %>% 
  plot_ly(y = ~score, color = ~cuisine_description, type = "box",
          colors = "Set2") %>%
   layout(legend = list(x = 100, y = 0.5)) %>%
    layout(
    title = "Inspection score by cuisine type in NYC") %>%
    layout(yaxis = list(title = 'Inspection Score')) %>%
    layout(xaxis = list(title = 'Cusine Type'))
})
```